0,  0,  1, -1), ncol = 4, byrow=T)
vscores.ramus = as.data.frame(as.matrix(vscores) %*% t(C))
library(ICSNP)
HotellingsT2(vscores.ramus, test="f")
# Interaction Plot
library(tidyverse)
vscores_df <- data.frame(ID = rep(c(1:36),4),
GROUP = rep(c("G8","G9","G10","G11"),each=36),
VALUE = c(vscores$G8,vscores$G9,vscores$G10,vscores$G11)) %>%
mutate(ID = as.factor(ID), GROUP = as.factor(GROUP))
with(vscores_df, interaction.plot(x.factor = GROUP, trace.factor = ID, response = VALUE, legend = FALSE))
boys = read.table("C:/Users/ysw29/Downloads/vscores.dat",header=T)
boys = boys[,-1]
C = matrix(c(1, -1, 0, 0,
0, 1, -1, 0,
0, 0, 1, -1), ncol = 4,byrow=T)
ad.boys = as.data.frame(as.matrix(boys) %*% t(C))
library(ICSNP)
HotellingsT2(ad.boys, test="f")
library(tidyverse)
boys1 <-  boys %>%
gather(key=Group,value=Freq,'G8','G9','G10','G11')
df_boys1 <- as.data.frame(boys1)
df_boys1
boys = read.table("C:/Users/ysw29/Downloads/vscores.dat",header=T)
boys = boys[,-1]
C = matrix(c(1, -1, 0, 0,
0, 1, -1, 0,
0, 0, 1, -1), ncol = 4,byrow=T)
ad.boys = as.data.frame(as.matrix(boys) %*% t(C))
library(ICSNP)
HotellingsT2(ad.boys, test="f")
library(tidyverse)
boys_p <- data.frame(ID = rep(c(1:36),4),
G = rep(c("G8","G9","G10","G11"),each=36),
P = c(boys$G8,boys$G9,boys$G10,boys$G11)) %>%
mutate(ID = as.factor(ID), G = as.factor(G))
with(boys_p, interaction.plot(x.factor = G, trace.factor = ID, response = P, legend = FALSE))
library(devtools)
install.packages("devtools")
library(devtools)
install_github('IRkernel/IRkernel')
IRkernel::installspec()
install_github('IRkernel/IRkernel')
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = 'http://irkernel.github.io/',type = 'source')
IRkernel::installspec()
install.packages(c('repr','IRdisplay','evaluate','crayon','pbdZMQ','devtools','uuid','digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("Rcpp")
install.packages("IRkernel")
devtools::install_github('IRkernel/IRkernel')
install.packages("backports")
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages("backports")
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
quit()
R.version
install.packages("installr")
library(installr)
updateR()
kor <- 90
eng <- 70
mat <- 95
tot <- kor + eng + mat
print("세과목 합계는")
print(tot)
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
kor <- 80
eng <- 70
mat <- 95
tot <- kor + eng + mat
print("세과목 합계는")
print(tot)
kor <- 80
eng <- 80.67
mat <- 90.0
total <- kor + eng + mat # total = 251.67
avg <- total/3 #avg = 83.89
sgrade <- "A" #문자 "A"를 변수에 저장
mode(sgrade)
sname <- "홍길동" # 문자열 "홍길동"을 변수에 저장
mode(sname)
kor <- 95 # kor에 95 저장
above90 <- kor >=90 # kor 값에 90점 이상인가?
below90 <- kor < 90 # kor 값에 90점 미만인가?
print(above90)
print(below90)
today1 <- sys.Date() # 현제의 날씨 출력
print(today1)
today2 <- sys.time()
today1 <- sys.Date() # 현제의 날짜 출력
print(today1)
today2 <- sys.time() # 현제의 날짜와 시간 출력
print(today2)
today1 <- Sys.Date() # 현제의 날짜 출력
print(today1)
today2 <- Sys.time() # 현제의 날짜와 시간 출력
print(today2)
10%%3
10%/%3
10%%3
10%/%3
kor <- 80
above70 <- kor >=70 # kor가 70점 이상인가?
print(above70)
kor <- 80
eng <- 70
above70 <- (kor >= 70) & (eng >= 70) # kor가 70점 이상이고
# eng가 70점 이상인가?
print(above70)
path.package()
library("class", lib.loc="C:/Program Files/R/R-3.5.2/library")
path.package()
detach("package:class", unload=TRUE)
path.package()
install.packages("ggplot2")
score <- c(80,90,70,65,55,30,60,90,88,100,76,30,55,61,89,68,78,70,88,82)
sum(score) # 반 합계 점수
mean(score) # 반 평균 점수
median(score) # 반 중앙값 점수
max(score) # 반 최고 점수
min(score) # 반 최저 점수
length(score) # 반 학생의 수
score <- c(80,90,70,65,55,30,60,90,88,100,76,30,55,61,89,68,78,70,88,82)
sumScore <- sum(score)
avgScore <- mean(score)
cat("총점 = ", sumScore, "평균 점수 = ", avgScore)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100)
korEng <- c(kor,eng)
math <- c(95, 70, "95", 80)
kor2 <- c(90,80, T, TRUE)
kor <- 80
math <- 90
eng <- "B"
sco <- c(kor,math,eng)
tot <- sum(sco)
library(ggplot2)
gender <- read.csv('d://titanic data/gender_submission.csv', header = TRUE)
test <- read.csv('d://titanic data/test.csv', header = TRUE)
train <- read.csv('d://titanic data/train.csv', header = TRUE)
gender <- read.csv("d://titanic data/gender_submission.csv", header = TRUE)
gender <- read.csv("d:/titanic data/gender_submission.csv", header = TRUE)
test <- read.csv('d:/titanic data/test.csv', header = TRUE)
x <- 1:5 # x는 1,2,3,4,5 의 5개의 원소를 갖는 벡터
cat("x : ",x, "\n")
y <- 10:5 # y는 10,9,8,7,6,5 의 6개의 원소를 갖는 벡터
cat("y : ",y,"\n")
res1 <- seq(from = 1, to = 20, by = 2) # 1부터 20까지 2씩 증가
cat("res1 : ",res1, "\n")
res2 <- seq(1, 5, 0.5) #1부터 5까지 0.5씩 증가
cat("res2 : ",res2, "\n")
res3 <- seq(1, 10, length.out = 7) #1부터 10까지 7개 되는 자료 생성
cat("res3 : ",res3, "\n")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,ncol = 3, byrow = TRUE)
kor <- c(80, 60 , 90 ,70)
eng <- c(70, 50, 100, 80)
print(score)
math <- c(95, 70, 95, 80)
scoreC <- cbind(kor, eng, math)
cat("cbind : \n "); print(scoreC)
scoreR <- rbind(kor, eng)
cat("rbind : \n"); print(scoreR)
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ", "\n")
cat("res4 : \n ")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
kor <- c(80, 60, 90, 70)
kor[3] <- 95
num <- kor[4]
evenStd <- kor[c(2,4)]
print(evenStd)
kor <- c(80, 60, 90, 70)
math <- c(95, 70, 95, 80)
eng <- c(70, 50, 100, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
math <- c(95, 70, 95)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100)
korEng <- c(kor,eng)
math <- c(95, 70, "95", 80)
kor2 <- c(90,80, T, TRUE)
kor <- 80
math <- 90
eng <- "B"
sco <- c(kor,math,eng)
tot <- sum(sco)
x <- 1:5 # x는 1,2,3,4,5 의 5개의 원소를 갖는 벡터
cat("x : ",x, "\n")
y <- 10:5 # y는 10,9,8,7,6,5 의 6개의 원소를 갖는 벡터
cat("y : ",y,"\n")
res1 <- seq(from = 1, to = 20, by = 2) # 1부터 20까지 2씩 증가
cat("res1 : ",res1, "\n")
res2 <- seq(1, 5, 0.5) #1부터 5까지 0.5씩 증가
cat("res2 : ",res2, "\n")
res3 <- seq(1, 10, length.out = 7) #1부터 10까지 7개 되는 자료 생성
cat("res3 : ",res3, "\n")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,nrow = 4)
print(score)
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,ncol = 3, byrow = TRUE)
print(score)
kor <- c(80, 60 , 90 ,70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
scoreC <- cbind(kor, eng, math)
cat("cbind : \n "); print(scoreC)
scoreR <- rbind(kor, eng)
cat("rbind : \n"); print(scoreR)
kor <- c(80, 60, 90, 70)
kor[3] <- 95
num <- kor[4]
evenStd <- kor[c(2,4)]
print(evenStd)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
score <- matrix(c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80), nrow = 4)
print(score)
score[2,2] <- score[2,2] + 20
print(score)
kor <- score[,1, drop = FALSE]
print(kor)
substu <- score[c(2,3),c(2,3)]
print(substu)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
finSco <- matrix(c(85, 75, 95, 80, 80, 70, 95, 90, 90, 85, 90, 85), nrow = 4)
midSco[3,2] <- 100
totalSco <- midSco + finSco
print(midSco)
print(finSco)
print(totalSco)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
colnames(midSco) <- c("국어","영어","수학")
rownames(midSco) <- c("정우성","김철수","송중기","김영희")
print(midSco)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData <- list(1,"김철수",60,50,70,"D")
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
print(stuInfo)
str(stuInfo)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData <- list(1,"김철수",60,50,70,"D")
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
print(stuInfo)
str(stuInfo)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData$scoEng <- 60
stuOneData$scoSci <- 90 # 과학 성적 주기, 기존에 없는 항목에 값을 대입할 경우 추가됨
stuOneData$grade <- NULL # 기존 리스트 항목에 NULL값을 대입하면 삭제됨
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
stuInfo$kor[3] <- 85
scoKor <- stuInfo$kor # 국어 점수를 추출하여 scoKor 벡터에 저장
stuOne <- stuInfo[3,] # 3번 학생 데이터를 추출하여 stuOne 데이터 프레임에 저장
scores <- stuInfo[,c(3:5)] # 국어, 영어, 수학 세 과목 성적을 scores 데이터 프레임에 저장
students <- stuInfo[c(2:3),] # 2번과 3번 학생 데이터를 추출하여 students 데이터 프레임에 저장
View(scores)
View(stuOneData)
View(stuOne)
View(stuOne)
View(stuOneData)
View(students)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(번호 = number,이름 = name,국어 = kor,영어 = eng,
수학 = mat, 학점 = grade,stringsAsFactors = FALSE)
res1 <- stuInfo$이름 ; print(res1) # 태그 이름"$이름"으로 name 행에 접근
res2 <- stuInfo[[2]] ; print(res2) # 이름 열을 벡터로 변환한다. stuInfo$이름 과 동일
res3 <- stuInfo["이름"] ; print(res3) # 이름 열을 데이터 프레임 구조로 변환
res4 <- stuInfo[2] ; print(res4) #이름 열을 데이터 프레임 구조로 변환 stuInfo["이름"]과 동일
print(class(res1))
print(class(res3))
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
stuInfo <- rbind(stuInfo, stuTwo)
View(stuInfo)
View(stuInfo)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
View(stuOne)
View(stuInfo)
stuInfo <- rbind(stuInfo, stuTwo)
View(stuInfo)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
stuInfo <- rbind(stuInfo, stuTwo)
stuInfo <- stuInfo[-5,] # -를 하면 그 행,열을 삭제해라 라는 뜻
View(stuInfo)
stuInfo <- stuInfo[-c(1,3),] # -를 하면 그 행,열을 삭제해라 라는 뜻
View(stuInfo)
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei)  #입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inWei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
Wei <- as.numeric(inWei)  #입력한 문자열을 숫자값으로 변경
Hei <- as.numeric(inHei)
vBmi <- (Wei*10000)/(Hei^2);
cat("당신의 BMI 지수는", vBmi,"입니다.\n")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inwei <- readline("당신의 몸무게는 ?")
wei <- as.numeric(inwei)
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는",vbmi,"입니다.\n")
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
print(kor)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
kor <- scan()
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
charvalue <- scan(what = character())
listvalue <- scan(what = list(name = character(),kor = numeric(),eng = numeric()))
View(listvalue)
student1 <- data.frame()
student1 <- edit(student1)
print(student1)
name = "홍길동"
sum = 254
avg = sum / 3
outMsg <- sprintf("%s 학생의 총점은 %d 이고, 평균은 %.3f입니다.",name, sum, avg)
cat(outMsg) # %s는 네임을 그 자리에 문자형으로 출력하라는 것 %d는 숫자형
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
bmi <- sprintf("당신의 BMI 지수는 %.1f입니다.\n",vbmi)
cat(bmi)
student1 <- data.frame() # 데이터 프레임 입력에 편리한 도구 edit
student1 <- edit(student1) # 표를 생성할 때 사용
print(student1)
student1 <- data.frame() # 데이터 프레임 입력에 편리한 도구 edit
student1 <- edit(student1) # 표를 생성할 때 사용
View(student1)
setwd("D:/R with Big Data/강의 실습자료/ch_06/Data")
txtLines <- readLines("ch6_movie_list.txt")
print(txtLines)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
txtLines <- readLines("ch6_movie_list.txt")
print(txtLines)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
txtLines <- readLines("ch6_movie_list.txt")
print(txtLines)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
eng <- scan("ch6_score.txt")
print(eng)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
listvalue <- scan("ch6_score_list.txt",what = list(name= character(),
kor = numeric(),
eng = numeric(), mat = numeric()))
cat("\nlistvalue : \n");
print(listvalue)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
score1 <- read.table("ch6_score_list.txt", header = FALSE, stringsAsFactors = FALSE)
print(score1)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
score1 <- read.table("ch6_score_space.txt", header = TRUE, stringsAsFactors = FALSE)
print(score1)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
score2 <- read.table("ch6_score_comma.csv", header = TRUE, sep = ",",
stringsAsFactor = FALSE)
print(score2)
setwd("D:/R with Big Data/강의 실습자료/ch_06")
kor = c(80, 90, 70)
write.table(kor, "kor1.txt")
write.table(kor, "kor2.txt", quote = FALSE , row.names = FALSE, col.names = FALSE)
# 데이터 불러오기
setwd("D:/R with Big Data/강의 실습자료/ch_06")
score1 <- read.table("ch6_score_space.txt", header = TRUE, stringsAsFactors = FALSE)
print(score1)
# 각 학생의 국영수 성적 합계 및 평균 구하기
sumValue <- apply(score1[c(2:4)],1, sum)
avgValue <- apply(score1[c(2:4)],1, mean)
cat("sumValue : \n"); print(sumValue)
cat("avgValue : \n"); print(avgValue)
# 국영수 성적에 합계와 평균에 해당하는 열 추가하기
score2 <- cbind(score1, sum = sumValue, avg = avgValue)
print(score2)
# 텍스트 파일로 저장하기
write.table(score2, "score2.txt", quote = FALSE, row.names = FALSE, col.names= TRUE)
