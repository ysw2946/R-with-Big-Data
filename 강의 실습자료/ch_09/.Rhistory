print(today2)
10%%3
10%/%3
10%%3
10%/%3
kor <- 80
above70 <- kor >=70 # kor가 70점 이상인가?
print(above70)
kor <- 80
eng <- 70
above70 <- (kor >= 70) & (eng >= 70) # kor가 70점 이상이고
# eng가 70점 이상인가?
print(above70)
path.package()
library("class", lib.loc="C:/Program Files/R/R-3.5.2/library")
path.package()
detach("package:class", unload=TRUE)
path.package()
install.packages("ggplot2")
score <- c(80,90,70,65,55,30,60,90,88,100,76,30,55,61,89,68,78,70,88,82)
sum(score) # 반 합계 점수
mean(score) # 반 평균 점수
median(score) # 반 중앙값 점수
max(score) # 반 최고 점수
min(score) # 반 최저 점수
length(score) # 반 학생의 수
score <- c(80,90,70,65,55,30,60,90,88,100,76,30,55,61,89,68,78,70,88,82)
sumScore <- sum(score)
avgScore <- mean(score)
cat("총점 = ", sumScore, "평균 점수 = ", avgScore)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100)
korEng <- c(kor,eng)
math <- c(95, 70, "95", 80)
kor2 <- c(90,80, T, TRUE)
kor <- 80
math <- 90
eng <- "B"
sco <- c(kor,math,eng)
tot <- sum(sco)
library(ggplot2)
gender <- read.csv('d://titanic data/gender_submission.csv', header = TRUE)
test <- read.csv('d://titanic data/test.csv', header = TRUE)
train <- read.csv('d://titanic data/train.csv', header = TRUE)
gender <- read.csv("d://titanic data/gender_submission.csv", header = TRUE)
gender <- read.csv("d:/titanic data/gender_submission.csv", header = TRUE)
test <- read.csv('d:/titanic data/test.csv', header = TRUE)
x <- 1:5 # x는 1,2,3,4,5 의 5개의 원소를 갖는 벡터
cat("x : ",x, "\n")
y <- 10:5 # y는 10,9,8,7,6,5 의 6개의 원소를 갖는 벡터
cat("y : ",y,"\n")
res1 <- seq(from = 1, to = 20, by = 2) # 1부터 20까지 2씩 증가
cat("res1 : ",res1, "\n")
res2 <- seq(1, 5, 0.5) #1부터 5까지 0.5씩 증가
cat("res2 : ",res2, "\n")
res3 <- seq(1, 10, length.out = 7) #1부터 10까지 7개 되는 자료 생성
cat("res3 : ",res3, "\n")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,ncol = 3, byrow = TRUE)
kor <- c(80, 60 , 90 ,70)
eng <- c(70, 50, 100, 80)
print(score)
math <- c(95, 70, 95, 80)
scoreC <- cbind(kor, eng, math)
cat("cbind : \n "); print(scoreC)
scoreR <- rbind(kor, eng)
cat("rbind : \n"); print(scoreR)
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ", "\n")
cat("res4 : \n ")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
kor <- c(80, 60, 90, 70)
kor[3] <- 95
num <- kor[4]
evenStd <- kor[c(2,4)]
print(evenStd)
kor <- c(80, 60, 90, 70)
math <- c(95, 70, 95, 80)
eng <- c(70, 50, 100, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
math <- c(95, 70, 95)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100)
korEng <- c(kor,eng)
math <- c(95, 70, "95", 80)
kor2 <- c(90,80, T, TRUE)
kor <- 80
math <- 90
eng <- "B"
sco <- c(kor,math,eng)
tot <- sum(sco)
x <- 1:5 # x는 1,2,3,4,5 의 5개의 원소를 갖는 벡터
cat("x : ",x, "\n")
y <- 10:5 # y는 10,9,8,7,6,5 의 6개의 원소를 갖는 벡터
cat("y : ",y,"\n")
res1 <- seq(from = 1, to = 20, by = 2) # 1부터 20까지 2씩 증가
cat("res1 : ",res1, "\n")
res2 <- seq(1, 5, 0.5) #1부터 5까지 0.5씩 증가
cat("res2 : ",res2, "\n")
res3 <- seq(1, 10, length.out = 7) #1부터 10까지 7개 되는 자료 생성
cat("res3 : ",res3, "\n")
res4 <- seq(3, 1000, 3) #3부터 1000까지 3의 배수인 자료 생성
cat("res4 : ",res4, "\n")
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,nrow = 4)
print(score)
data = c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80)
score <- matrix(data,ncol = 3, byrow = TRUE)
print(score)
kor <- c(80, 60 , 90 ,70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
scoreC <- cbind(kor, eng, math)
cat("cbind : \n "); print(scoreC)
scoreR <- rbind(kor, eng)
cat("rbind : \n"); print(scoreR)
kor <- c(80, 60, 90, 70)
kor[3] <- 95
num <- kor[4]
evenStd <- kor[c(2,4)]
print(evenStd)
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
math <- c(95, 70, 95, 80)
totStu <- kor + eng + math
cat("totStu : "); print(totStu)
res <- kor / math
cat("res : "); print(res)
score <- matrix(c(80, 60, 90, 70, 70, 50, 100, 80, 95, 70, 95, 80), nrow = 4)
print(score)
score[2,2] <- score[2,2] + 20
print(score)
kor <- score[,1, drop = FALSE]
print(kor)
substu <- score[c(2,3),c(2,3)]
print(substu)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
finSco <- matrix(c(85, 75, 95, 80, 80, 70, 95, 90, 90, 85, 90, 85), nrow = 4)
midSco[3,2] <- 100
totalSco <- midSco + finSco
print(midSco)
print(finSco)
print(totalSco)
midSco <- matrix(c(80, 60, 90, 70, 70, 50, 10, 80, 95, 70, 95, 80), nrow = 4)
colnames(midSco) <- c("국어","영어","수학")
rownames(midSco) <- c("정우성","김철수","송중기","김영희")
print(midSco)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData <- list(1,"김철수",60,50,70,"D")
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
print(stuInfo)
str(stuInfo)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData <- list(1,"김철수",60,50,70,"D")
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
print(stuInfo)
str(stuInfo)
stuOneData <- list(Number=1,Name="김철수", scoKor = 60, scoEng = 50,
scoMat = 70, grade = "D")
stuOneData$scoEng <- 60
stuOneData$scoSci <- 90 # 과학 성적 주기, 기존에 없는 항목에 값을 대입할 경우 추가됨
stuOneData$grade <- NULL # 기존 리스트 항목에 NULL값을 대입하면 삭제됨
print(stuOneData)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
stuInfo$kor[3] <- 85
scoKor <- stuInfo$kor # 국어 점수를 추출하여 scoKor 벡터에 저장
stuOne <- stuInfo[3,] # 3번 학생 데이터를 추출하여 stuOne 데이터 프레임에 저장
scores <- stuInfo[,c(3:5)] # 국어, 영어, 수학 세 과목 성적을 scores 데이터 프레임에 저장
students <- stuInfo[c(2:3),] # 2번과 3번 학생 데이터를 추출하여 students 데이터 프레임에 저장
View(scores)
View(stuOneData)
View(stuOne)
View(stuOne)
View(stuOneData)
View(students)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(번호 = number,이름 = name,국어 = kor,영어 = eng,
수학 = mat, 학점 = grade,stringsAsFactors = FALSE)
res1 <- stuInfo$이름 ; print(res1) # 태그 이름"$이름"으로 name 행에 접근
res2 <- stuInfo[[2]] ; print(res2) # 이름 열을 벡터로 변환한다. stuInfo$이름 과 동일
res3 <- stuInfo["이름"] ; print(res3) # 이름 열을 데이터 프레임 구조로 변환
res4 <- stuInfo[2] ; print(res4) #이름 열을 데이터 프레임 구조로 변환 stuInfo["이름"]과 동일
print(class(res1))
print(class(res3))
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
stuInfo <- rbind(stuInfo, stuTwo)
View(stuInfo)
View(stuInfo)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
View(stuOne)
View(stuInfo)
stuInfo <- rbind(stuInfo, stuTwo)
View(stuInfo)
number <- seq(1:4)
name <- c("정우성","김철수","송중기","김영희")
kor <- c(80, 60, 90, 70)
eng <- c(70, 50, 100, 80)
mat <- c(95, 70, 95, 80)
grade <- c("B","D","A","C")
stuInfo <- data.frame(number,name,kor,eng,mat,grade,stringsAsFactors = FALSE)
sci <- c(95, 85, 75, 80)
stuOne <- list(5,"홍길동",85, 95, 80, 90,"A");
stuTwo <- list(6,"광개토",95, 80, 90, "A");
stuInfo <- cbind(stuInfo[, c(1:5)],sci,stuInfo[6])
stuInfo <- rbind(stuInfo[c(1:2), ],stuOne,stuInfo[c(3:4),])
stuInfo <- rbind(stuInfo, stuTwo)
stuInfo <- stuInfo[-5,] # -를 하면 그 행,열을 삭제해라 라는 뜻
View(stuInfo)
stuInfo <- stuInfo[-c(1,3),] # -를 하면 그 행,열을 삭제해라 라는 뜻
View(stuInfo)
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
name <- readline("Input your name : ")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei)  #입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inWei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
Wei <- as.numeric(inWei)  #입력한 문자열을 숫자값으로 변경
Hei <- as.numeric(inHei)
vBmi <- (Wei*10000)/(Hei^2);
cat("당신의 BMI 지수는", vBmi,"입니다.\n")
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는", vbmi,"입니다.\n")
inwei <- readline("당신의 몸무게는 ?")
wei <- as.numeric(inwei)
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
cat("당신의 BMI 지수는",vbmi,"입니다.\n")
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
print(kor)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
kor <- scan()
source('D:/R with Big Data/rtest/6.R', encoding = 'UTF-8', echo=TRUE)
charvalue <- scan(what = character())
listvalue <- scan(what = list(name = character(),kor = numeric(),eng = numeric()))
View(listvalue)
student1 <- data.frame()
student1 <- edit(student1)
print(student1)
name = "홍길동"
sum = 254
avg = sum / 3
outMsg <- sprintf("%s 학생의 총점은 %d 이고, 평균은 %.3f입니다.",name, sum, avg)
cat(outMsg) # %s는 네임을 그 자리에 문자형으로 출력하라는 것 %d는 숫자형
inwei <- readline("당신의 몸무게는?") #readline은 문자열로 들어간다
wei <- as.numeric(inwei) # 입력한 문자열을 숫자값으로 변경
hei <- as.numeric(inhei)
vbmi <- (wei*10000)/(hei^2);
bmi <- sprintf("당신의 BMI 지수는 %.1f입니다.\n",vbmi)
cat(bmi)
student1 <- data.frame() # 데이터 프레임 입력에 편리한 도구 edit
student1 <- edit(student1) # 표를 생성할 때 사용
print(student1)
student1 <- data.frame() # 데이터 프레임 입력에 편리한 도구 edit
student1 <- edit(student1) # 표를 생성할 때 사용
View(student1)
setwd("D:/R with Big Data/강의 실습자료/ch_06/Data")
txtLines <- readLines("ch6_movie_list.txt")
print(txtLines)
cat(base,"을 초과하면서",base,"에 가장 가까운",multi,"의 배수는",x,"입니다")
x <- 0; base <- 100; multi <- 7;
while(x <= base){
x <- x + multi;
}
cat(base,"을 초과하면서",base,"에 가장 가까운",multi,"의 배수는",x,"입니다")
install.packages("tm")
inNUM <- readline("임의의 자연수를 입력하세요 : ")
remainder <- number %% 2
if(remainder == 0){
result <- "even number"
}else{
result <- "odd number"
}
cat(number,"is an", result)
score <- 85
if (score >= 90){
Grade <- "A"
} else if(score >=80){
Grade <- "B"
} else{
Grade <- "C"
}
cat("Your grade is", Grade)
for(n in 1:5){
print(n)
}
x <- c(1,3,5)
for (n in x){
cat(n,"의 제곱",n*n,"\n")
}
evenCount <- 0
oddCount <- 0
x <- c(3,4,9,1,6,2,6,7,3)
for (n in x)
if( n %% 2 == 0){
evenCount <- evenCount + 1
}else{
oddCount <- oddCount + 1
}
cat("짝수의 개수 :",evenCount,"\n")
cat("홀수의 개수 :",oddCount,"\n")
x <- 1; base <- 300
while (x <= base){
x <- x*2
}
cat(base,"보다 크면서",base,"에 가장 가까운 2의 제곱승 값은",x,"이다","\n");
x <- 0; base <- 100; multi <- 7;
while (x <= base){
x <- x + multi;
}
cat(base,"을 초과하면서",base,"에 가장 가까운",multi,"의 배수는",x,"입니다")
x <- 0; base <- 100; multi <- 7;
repeat{
if(x > base) break
x <- x + multi
}
cat(base,"을 초과하면서",base,"에 가장 가까운",multi,"의 배수는",x,"입니다","\n");
id <- c("1","2","3","4")
name <- c("정우성","민철우","송중기","김영희")
kor <- c(80,60,90,70)
eng <- c(70,50,100,80)
mat <- c(95,70,95,80)
score1 <- data.frame(학번=id,이름=name,국어=kor,영어=eng,수학=mat)
print(score1)
avgValue <- apply(score1[,c(3:5)],1, mean)
print(avgValue)
finalGrade <- c()
for(n in avgValue){
if(n>=90){
Grade <- "A"
} else if(n >= 80){
Grade <- "B"
} else if(n >= 70){
Grade <- "C"
} else if(n >= 60){
Grade <- "D"
} else{
Grade <- "F"
}
finalGrade <- c(finalGrade,Grade)
}
print(finalGrade)
score2 <- cbind(score1,평균 = avgValue, 등급 = finalGrade)
print(score2)
score1 <- cbind(score1,평균 = avgValue, 등급 = finalGrade)
print(score1)
str_including_pole <- grep("Pole",c("North Pole","South Pole","Equator"), value = TRUE)
print(str_including_pole)
index_of_pole <- grep("Pole",c("North Pole","South Pole","Equator"), value = FALSE)
print(index_of_pole)
elec_code <- substr("LEDTV-48-B",1,5);
print(elec_code)
list_word <- strsplit("7-24-2017",split="-");
print(list_word)
vec_word <- unlist(list_word);
print(vec_word)
word <- strsplit("2017.7.24",split=".");
print(word)
word1 <- strsplit("2017.7.24",split=".",fixed=TRUE);
print(word1)
word2 <- strsplit("2017.7.24",split="\\.");
print(word2)
pword1 <- paste("2017","5","30");
print(pword1)
pword2 <- paste("2017","5","30",sep="-");
print(pword2)
txt <- "Text Analytics is useful. Text Analytics is also interesting"
new_txt1 <- sub("Text","Data",txt);
print(new_txt1)
new_txt2 <- gsub("Text","Data",txt);
print(new_txt2)
txt <- "Text-Analytics is useful.\n Text Analytics is also interesting.\n"
txt1 <- gsub("\n","",txt)
print(txt1)
txt2 <- gsub("-","",txt1)
print(txt2)
txt <- "Text Analytics is useful. Text Analytics is also interesting"
small_txt <- tolower(txt);
print(small_txt)
capital_txt <- toupper(txt);
print(capital_txt)
grade <- c("B","C","C","B","A","C","C")
freq_grade <- table(grade); print(freq_grade)
setwd("D:/R with Big Data/강의 실습자료/ch_09")
lyrics <- readLines("ch9_2_jingle_bells.txt")
lyrics <- gsub(",","",lyrics)
lyrics <- gsub("\\.","",lyrics)
lyrics <- gsub("-","",lyrics)
lyrics <- tolower(lyrics)
lyricsword <- strsplit(lyrics," ")
lyricswordList <- unlist(lyricsword)
lyricsCount <- table(lyricswordList)
lyricsCount <- sort(lyricsCount, decending=TRUE)
lyricsCount <- lyricsCount[lyricsCount >= 2]
print(lyricsCount)
barplot(lyricsCount, horiz=TRUE,las=1,xlim=c(0,7),col="orange",main="jingle_bells")
lyricsworldListNotUsed <- removewords(lyricswordList, stopwords("en"))
library("tm", lib.loc="~/R/win-library/3.5")
lyricsworldListNotUsed <- removewords(lyricswordList, stopwords("en"))
lyricsworldListNotUsed <- removeWords(lyricswordList, stopwords("en"))
lyricsworldListNotUsed <- lyricsworldListNotUsed[nchar(lyricsworldListNotUsed) >=1]
lyricsworldListNotUsed <- table(lyricswordListNotUsed)
lyricswordListNotUsed <- sort(lyricswordListNotUsed, decreasing = TRUE)
lyricswordListNotUsed <- lyricswordListNotUsed[lyricswordListNotUsed >= 2]
barplot(lyricsCount, horiz=TRUE,las=2,xlim=c(0,7),col="mediumseagreen",main="jingle bells")
lyricswordListNotUsed <- removeWords(lyricswordList, stopwords("en"))
lyricswordListNotUsed <- lyricsworldListNotUsed[nchar(lyricsworldListNotUsed) >=1]
lyricswordListNotUsed <- table(lyricswordListNotUsed)
lyricswordListNotUsed <- sort(lyricswordListNotUsed, decreasing = TRUE)
lyricswordListNotUsed <- lyricswordListNotUsed[lyricswordListNotUsed >= 2]
barplot(lyricsCount, horiz=TRUE,las=2,xlim=c(0,7),col="mediumseagreen",main="jingle bells")
